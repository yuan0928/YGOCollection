// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YGOCollection.Repository.DataModels;

namespace YGOCollection.Repository.Migrations
{
    [DbContext(typeof(YGOContext))]
    [Migration("20211215090530_AddCarTypeSeed")]
    partial class AddCarTypeSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("YGOCollection.Repository.DataModels.CardInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CardSeriesId")
                        .HasColumnType("int");

                    b.Property<int>("CardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeriesNum")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardSeriesId");

                    b.HasIndex("CardTypeId");

                    b.ToTable("CardInfos");
                });

            modelBuilder.Entity("YGOCollection.Repository.DataModels.CardSeries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SeriesName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CardSeries");
                });

            modelBuilder.Entity("YGOCollection.Repository.DataModels.CardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CardTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "怪獸卡"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "魔法卡"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "陷阱卡"
                        });
                });

            modelBuilder.Entity("YGOCollection.Repository.DataModels.CardInfo", b =>
                {
                    b.HasOne("YGOCollection.Repository.DataModels.CardSeries", "CardSeries")
                        .WithMany("CardInfos")
                        .HasForeignKey("CardSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YGOCollection.Repository.DataModels.CardType", "CardType")
                        .WithMany("CardInfos")
                        .HasForeignKey("CardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CardSeries");

                    b.Navigation("CardType");
                });

            modelBuilder.Entity("YGOCollection.Repository.DataModels.CardSeries", b =>
                {
                    b.Navigation("CardInfos");
                });

            modelBuilder.Entity("YGOCollection.Repository.DataModels.CardType", b =>
                {
                    b.Navigation("CardInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
